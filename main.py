from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from aiogram.contrib.middlewares.logging import LoggingMiddleware
import psutil
import platform
import subprocess
from ping3 import ping
import os
from aiogram.types import InputFile
import zipfile
import logging
import io

API_TOKEN = '–¢–û–ö–ï–ù' #–í–ê–® –¢–û–ö–ï–ù –ò–ó @BOTFATHER
OWNER_ID = –ê–ô–î–ò #–í–ê–® –¢–ï–õ–ï–ì–†–ê–ú –ê–ô–î–ò

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())


management_markup = InlineKeyboardMarkup(row_width=2)
management_markup.row(
    InlineKeyboardButton('–£–∑–Ω–∞—Ç—å IP üåê', callback_data='get_ip'),
    InlineKeyboardButton('–ü–∏–Ω–≥ üìâ', callback_data='ping')
)
management_markup.row(
    InlineKeyboardButton('–û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ üóë', callback_data='clear_cache'), 
    InlineKeyboardButton('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ üë•', callback_data='list_users')
)   
management_markup.row(
    InlineKeyboardButton('–ë–µ–∫–∞–ø üíæ', callback_data='start_backup'),
    InlineKeyboardButton('–°—Ç–∞—Ç—É—Å ‚è≥', callback_data='server_status')
)
management_markup.row(
    InlineKeyboardButton('‚ùå –û—Ç–º–µ–Ω–∞', callback_data='cancel_action')
)


main_menu = ReplyKeyboardMarkup(resize_keyboard=True)
main_menu.row(KeyboardButton('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä'), KeyboardButton('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ‚öôÔ∏è'))
main_menu.row(KeyboardButton('–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É üïπ'))
main_menu.row(KeyboardButton('–õ–æ–≥–∏ üìã'), KeyboardButton('–ü–æ–º–æ—â—å üìö'))


confirm_markup = InlineKeyboardMarkup(row_width=2)
confirm_markup.row(
    InlineKeyboardButton('–î–∞ ‚úÖ', callback_data='confirm_command')
)
confirm_markup.row(
    InlineKeyboardButton('–û—Ç–º–µ–Ω–∞ ‚ùå', callback_data='cancel_command')
)


logs_menu = InlineKeyboardMarkup(row_width=2)
logs_menu.add(
    InlineKeyboardButton('Auth üîê', callback_data='logs_auth'),
    InlineKeyboardButton('Python üêç', callback_data='logs_python'),
    InlineKeyboardButton('Nginx üåê', callback_data='logs_nginx'),
    InlineKeyboardButton('Apache üåç', callback_data='logs_apache'),
    InlineKeyboardButton('Squid ü¶ë', callback_data='logs_squid'),
    InlineKeyboardButton('Dante üé≠', callback_data='logs_dante'),
    InlineKeyboardButton('–û—Ç–º–µ–Ω–∞ ‚ùå', callback_data='cancel_action')
)


user_states = {}

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    if message.from_user.id == OWNER_ID:
        await message.answer("<b>üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>", reply_markup=main_menu, parse_mode='HTML')
    else:
        await message.answer("<b>‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.</b>", parse_mode='HTML')

@dp.message_handler(lambda message: message.text == '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä')
async def send_statistics(message: types.Message):
    if message.from_user.id == OWNER_ID:
        
        system_info = platform.uname()
        cpu_usage = psutil.cpu_percent(interval=0.1)  
        cpu_count = psutil.cpu_count()
        memory = psutil.virtual_memory()
        disk = psutil.disk_usage('/')
        uptime_seconds = psutil.boot_time()
        uptime_hours = int((psutil.time.time() - uptime_seconds) // 3600)

        
        try:
            ping_result = ping('google.com')
            ping_time = f"{round(ping_result * 1000)} –º—Å" if ping_result else "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ—Ä–∏—Ç—å –ø–∏–Ω–≥"
        except Exception:
            ping_time = "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ—Ä–∏—Ç—å –ø–∏–Ω–≥"

        
        statistics = (
            f"<b>üñ• –°–∏—Å—Ç–µ–º–∞:</b> {system_info.system} {system_info.release}\n"
            f"<b>üìù –í–µ—Ä—Å–∏—è:</b> {system_info.version}\n"
            f"<b>üíª –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä:</b> {cpu_count} —è–¥–µ—Ä, –∑–∞–≥—Ä—É–∑–∫–∞ {cpu_usage}%\n"
            f"<b>üï∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b> {uptime_hours} —á–∞—Å–æ–≤\n"
            f"<b>üíæ RAM:</b> {memory.available // (1024 ** 2)} MB –∏–∑ {memory.total // (1024 ** 2)} MB\n"
            f"<b>üíΩ SSD:</b> {disk.free // (1024 ** 3)} GB –∏–∑ {disk.total // (1024 ** 3)} GB\n"
            f"<b>üì∂ –ü–∏–Ω–≥:</b> {ping_time}\n"
        )
        await message.answer(statistics, parse_mode='HTML')
    else:
        await message.answer("<b>‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.</b>", parse_mode='HTML')




@dp.message_handler(lambda message: message.text == '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ‚öôÔ∏è')
async def show_management_options(message: types.Message):
    if message.from_user.id == OWNER_ID:
        await message.answer("<b>‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å:</b>", parse_mode='HTML', reply_markup=management_markup)
    else:
        await message.answer("<b>‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.</b>", parse_mode='HTML')

@dp.callback_query_handler(lambda c: c.data in ['get_ip', 'ping', 'list_users', 'clear_cache', 'start_backup', 'server_status', 'cancel_action'])
async def handle_management_action(callback_query: types.CallbackQuery):
    action = callback_query.data
    chat_id = callback_query.message.chat.id

    if action == 'cancel_action':
        await bot.delete_message(chat_id=chat_id, message_id=callback_query.message.message_id)
        await bot.send_message(chat_id=chat_id, text="<b>‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.</b>", parse_mode='HTML')
        return

    await bot.delete_message(chat_id=chat_id, message_id=callback_query.message.message_id)

    if action == 'get_ip':
        ip_info = subprocess.run("hostname -I", shell=True, capture_output=True, text=True).stdout.strip()
        await bot.send_message(chat_id=chat_id, text=f"<b>üåê IP –∞–¥—Ä–µ—Å:</b> {ip_info}", parse_mode='HTML')
    elif action == 'ping':
        ping_result = ping('google.com')
        ping_time = f"{round(ping_result * 1000)} –º—Å" if ping_result else "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ—Ä–∏—Ç—å –ø–∏–Ω–≥"
        await bot.send_message(chat_id=chat_id, text=f"<b>üìâ –ü–∏–Ω–≥ –¥–æ google.com:</b> {ping_time}", parse_mode='HTML')
    elif action == 'clear_cache':
        cache_clear = subprocess.run("sudo apt clean", shell=True, capture_output=True, text=True).stdout.strip()
        await bot.send_message(chat_id=chat_id, text=f"<b>üóë –ö–µ—à –æ—á–∏—â–µ–Ω:</b> {cache_clear}", parse_mode='HTML')
    elif action == 'list_users':
        users_list = subprocess.run("cut -d: -f1 /etc/passwd", shell=True, capture_output=True, text=True).stdout.strip()
        await bot.send_message(chat_id=chat_id, text=f"<b>üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n<pre>{users_list}</pre>", parse_mode='HTML')
    elif action == 'start_backup':
        backup_path = '/root_backup.tar.gz'
        try:
            subprocess.run(f'tar -czvf {backup_path} /root', shell=True, check=True)
            with open(backup_path, 'rb') as backup_file:
                await bot.send_document(chat_id=callback_query.message.chat.id, document=backup_file, caption="<b>üì¶ –ë—ç–∫–∞–ø –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ /root:</b>", parse_mode='HTML')
            
            subprocess.run(f'rm {backup_path}', shell=True, check=True)
        except Exception as e:
            await callback_query.message.answer(f"<b>‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—ç–∫–∞–ø–∞:</b> {e}", parse_mode='HTML')
    elif action == 'server_status':
        server_status = subprocess.run("uptime", shell=True, capture_output=True, text=True).stdout.strip()
        await bot.send_message(chat_id=chat_id, text=f"<b>‚è≥ –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞:</b>\n<pre>{server_status}</pre>", parse_mode='HTML')

@dp.message_handler(lambda message: message.text == '–õ–æ–≥–∏ üìã')
async def show_logs(message: types.Message):
    if message.from_user.id == OWNER_ID:
        
        await message.answer("<b>üìö –í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –±—É–¥–µ–º —Å–º–æ—Ç—Ä–µ—Ç—å:</b>", reply_markup=logs_menu, parse_mode='HTML')
    else:
        await message.answer("<b>‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.</b>", parse_mode='HTML')


@dp.callback_query_handler(lambda c: c.data.startswith('logs_'))
async def handle_logs(callback_query: types.CallbackQuery):
    log_type = callback_query.data[len('logs_'):]

    
    LOG_FILES = {
        'nginx': '/var/log/nginx/access.log',
        'apache': '/var/log/apache2/access.log',
        'auth': '/var/log/auth.log',
        'python': '/var/log/python.log',
        'squid': '/var/log/squid/access.log',
        'dante': '/var/log/dante.log'
    }

    log_file_path = LOG_FILES.get(log_type)

    
    await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)

    if log_file_path and os.path.exists(log_file_path):
        try:
            
            zip_buffer = io.BytesIO()


            with zipfile.ZipFile(zip_buffer, 'w', zipfile.ZIP_DEFLATED) as zip_file:
                zip_file.write(log_file_path, os.path.basename(log_file_path))

            
            zip_buffer.seek(0)


            zip_file_input = InputFile(zip_buffer, filename=f"{log_type}_logs.zip")

            
            await bot.send_document(
                chat_id=callback_query.message.chat.id,
                document=zip_file_input,
                caption=f"<b>üìÑ –õ–æ–≥–∏:</b> {log_type}",
                parse_mode='HTML'
            )
        except Exception as e:
            
            await callback_query.message.answer("<b>‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–≥–æ–≤.</b>", parse_mode='HTML')
    else:
        await callback_query.message.answer("<b>‚ùå –õ–æ–≥ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.</b>", parse_mode='HTML')


@dp.message_handler(lambda message: message.text == '–ü–æ–º–æ—â—å üìö')
async def show_help(message: types.Message):
    if message.from_user.id == OWNER_ID:
        help_text = (
            "<b>üìö –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–∞–Ω–¥–∞—Ö:</b>\n\n"
            "<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b> - –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã: –∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏, –ø–∏–Ω–≥ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ç–µ–≤—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞—Ö.\n\n"
            "<b>‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ</b> - –ü–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è, —Ç–∞–∫–∏–µ –∫–∞–∫ –æ—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞, –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–∏–Ω–≥–∞, –ø–æ–ª—É—á–µ–Ω–∏–µ IP-–∞–¥—Ä–µ—Å–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π.\n\n"
            "<b>üìã –õ–æ–≥–∏</b> - –ü–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–±—Ä–∞—Ç—å –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤, —Ç–∞–∫–∏—Ö –∫–∞–∫ Auth, Python, Nginx, Apache, Squid –∏ Dante.\n\n"
            "<b>üïπ –í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É</b> - –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.\n\n"
            "<b>üìö –ü–æ–º–æ—â—å</b> - –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
        )
        
        await message.answer(help_text, parse_mode='HTML')
    else:
        await message.answer("<b>‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.</b>", parse_mode='HTML')

@dp.callback_query_handler(lambda c: c.data == 'close_help')
async def close_help(callback_query: types.CallbackQuery):
    
    await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)

@dp.message_handler(lambda message: message.text == '–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É üïπ')
async def ask_command(message: types.Message):
    if message.from_user.id == OWNER_ID:

        user_states[message.from_user.id] = 'waiting_for_command'
        await message.answer("<b>üïπ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.</b>", parse_mode='HTML')
    else:
        await message.answer("<b>‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.</b>", parse_mode='HTML')

@dp.message_handler(lambda message: message.text and message.from_user.id in user_states and user_states[message.from_user.id] == 'waiting_for_command')
async def handle_command(message: types.Message):
    command = message.text
    user_states[message.from_user.id] = command  
    await message.answer(
        f"<b>üïπ –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É:</b>\n<pre>{command}</pre>",
        parse_mode='HTML',
        reply_markup=confirm_markup
    )

@dp.callback_query_handler(lambda c: c.data in ['confirm_command', 'cancel_command'])
async def process_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    command = user_states.get(user_id, None)

    if callback_query.data == 'confirm_command' and command:
        
        await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)
        try:
            
            result = subprocess.run(command, shell=True, capture_output=True, text=True)
            if result.returncode == 0:
                output = result.stdout.strip() or "–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –±–µ–∑ –≤—ã–≤–æ–¥–∞."
                await callback_query.message.answer(f"<b>‚úÖ –í—ã–≤–æ–¥:</b>\n<pre>{output}</pre>", parse_mode='HTML')
            else:
                error = result.stderr.strip() or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞."
                await callback_query.message.answer(f"<b>‚ùå –û—à–∏–±–∫–∞:</b>\n<pre>{error}</pre>", parse_mode='HTML')
        except Exception as e:
            await callback_query.message.answer(f"<b>‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã:</b> {e}", parse_mode='HTML')
    elif callback_query.data == 'cancel_command':
        
        await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)
        
        await callback_query.message.answer("<b>‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.</b>", parse_mode='HTML')
    

    user_states[user_id] = None



if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)